//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.3
//     from Assets/Developers/Jack/Stuff/DefaultControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DefaultControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DefaultControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DefaultControls"",
    ""maps"": [
        {
            ""name"": ""Controller"",
            ""id"": ""34a250f8-ab53-4ff9-8e51-b5a38cedb282"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""173d4b96-6e01-44b6-bbb1-709c8c7863be"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""152c7611-b37e-443e-84c0-dbb5fdefae25"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TimeStop"",
                    ""type"": ""Button"",
                    ""id"": ""34207d1b-63f1-48fa-9e36-f6af0b17c138"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Log"",
                    ""type"": ""Button"",
                    ""id"": ""996ba421-3907-4d8e-8137-28be087c964c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SceneForward"",
                    ""type"": ""Button"",
                    ""id"": ""6c5d52d3-3627-4f89-b666-a7e4c514ef0b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SceneBackward"",
                    ""type"": ""Button"",
                    ""id"": ""debb1270-311e-4bf4-ba7a-4011dd49cf47"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Targeting"",
                    ""type"": ""Button"",
                    ""id"": ""2a1fffbb-76b8-4564-979f-150c31465144"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Choose Target"",
                    ""type"": ""Value"",
                    ""id"": ""f7f00df9-6587-43cd-b5a8-2241622d1086"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""79f2ddaf-b582-482c-984c-c72139d8900b"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""DefaultCon"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d925bffe-89b3-4c68-9ad4-464907178999"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""DefaultCon"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""161813e6-58bb-4733-8ae0-89dfe53229f5"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a0fa10e8-7a77-47e5-8786-6712f69ade3a"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""DefaultCon"",
                    ""action"": ""TimeStop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2b11e145-92f7-48c5-8997-622217253859"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Log"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5391e2f0-a152-4e93-989b-af1343ccd628"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""DefaultCon"",
                    ""action"": ""SceneForward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2753a3de-a8bb-49ec-95d1-46eb02939082"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""DefaultCon"",
                    ""action"": ""SceneBackward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""293d755c-58c0-4b07-8c77-cc07e3073612"",
                    ""path"": ""<Gamepad>/leftStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""DefaultCon"",
                    ""action"": ""Targeting"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""efa14a0d-8cfd-4139-9590-8ceeae83898f"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""DefaultCon"",
                    ""action"": ""Choose Target"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""DefaultCon"",
            ""bindingGroup"": ""DefaultCon"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Controller
        m_Controller = asset.FindActionMap("Controller", throwIfNotFound: true);
        m_Controller_Movement = m_Controller.FindAction("Movement", throwIfNotFound: true);
        m_Controller_Attack = m_Controller.FindAction("Attack", throwIfNotFound: true);
        m_Controller_TimeStop = m_Controller.FindAction("TimeStop", throwIfNotFound: true);
        m_Controller_Log = m_Controller.FindAction("Log", throwIfNotFound: true);
        m_Controller_SceneForward = m_Controller.FindAction("SceneForward", throwIfNotFound: true);
        m_Controller_SceneBackward = m_Controller.FindAction("SceneBackward", throwIfNotFound: true);
        m_Controller_Targeting = m_Controller.FindAction("Targeting", throwIfNotFound: true);
        m_Controller_ChooseTarget = m_Controller.FindAction("Choose Target", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Controller
    private readonly InputActionMap m_Controller;
    private IControllerActions m_ControllerActionsCallbackInterface;
    private readonly InputAction m_Controller_Movement;
    private readonly InputAction m_Controller_Attack;
    private readonly InputAction m_Controller_TimeStop;
    private readonly InputAction m_Controller_Log;
    private readonly InputAction m_Controller_SceneForward;
    private readonly InputAction m_Controller_SceneBackward;
    private readonly InputAction m_Controller_Targeting;
    private readonly InputAction m_Controller_ChooseTarget;
    public struct ControllerActions
    {
        private @DefaultControls m_Wrapper;
        public ControllerActions(@DefaultControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Controller_Movement;
        public InputAction @Attack => m_Wrapper.m_Controller_Attack;
        public InputAction @TimeStop => m_Wrapper.m_Controller_TimeStop;
        public InputAction @Log => m_Wrapper.m_Controller_Log;
        public InputAction @SceneForward => m_Wrapper.m_Controller_SceneForward;
        public InputAction @SceneBackward => m_Wrapper.m_Controller_SceneBackward;
        public InputAction @Targeting => m_Wrapper.m_Controller_Targeting;
        public InputAction @ChooseTarget => m_Wrapper.m_Controller_ChooseTarget;
        public InputActionMap Get() { return m_Wrapper.m_Controller; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControllerActions set) { return set.Get(); }
        public void SetCallbacks(IControllerActions instance)
        {
            if (m_Wrapper.m_ControllerActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnMovement;
                @Attack.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnAttack;
                @Attack.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnAttack;
                @TimeStop.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnTimeStop;
                @TimeStop.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnTimeStop;
                @TimeStop.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnTimeStop;
                @Log.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnLog;
                @Log.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnLog;
                @Log.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnLog;
                @SceneForward.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnSceneForward;
                @SceneForward.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnSceneForward;
                @SceneForward.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnSceneForward;
                @SceneBackward.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnSceneBackward;
                @SceneBackward.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnSceneBackward;
                @SceneBackward.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnSceneBackward;
                @Targeting.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnTargeting;
                @Targeting.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnTargeting;
                @Targeting.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnTargeting;
                @ChooseTarget.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnChooseTarget;
                @ChooseTarget.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnChooseTarget;
                @ChooseTarget.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnChooseTarget;
            }
            m_Wrapper.m_ControllerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
                @TimeStop.started += instance.OnTimeStop;
                @TimeStop.performed += instance.OnTimeStop;
                @TimeStop.canceled += instance.OnTimeStop;
                @Log.started += instance.OnLog;
                @Log.performed += instance.OnLog;
                @Log.canceled += instance.OnLog;
                @SceneForward.started += instance.OnSceneForward;
                @SceneForward.performed += instance.OnSceneForward;
                @SceneForward.canceled += instance.OnSceneForward;
                @SceneBackward.started += instance.OnSceneBackward;
                @SceneBackward.performed += instance.OnSceneBackward;
                @SceneBackward.canceled += instance.OnSceneBackward;
                @Targeting.started += instance.OnTargeting;
                @Targeting.performed += instance.OnTargeting;
                @Targeting.canceled += instance.OnTargeting;
                @ChooseTarget.started += instance.OnChooseTarget;
                @ChooseTarget.performed += instance.OnChooseTarget;
                @ChooseTarget.canceled += instance.OnChooseTarget;
            }
        }
    }
    public ControllerActions @Controller => new ControllerActions(this);
    private int m_DefaultConSchemeIndex = -1;
    public InputControlScheme DefaultConScheme
    {
        get
        {
            if (m_DefaultConSchemeIndex == -1) m_DefaultConSchemeIndex = asset.FindControlSchemeIndex("DefaultCon");
            return asset.controlSchemes[m_DefaultConSchemeIndex];
        }
    }
    public interface IControllerActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnTimeStop(InputAction.CallbackContext context);
        void OnLog(InputAction.CallbackContext context);
        void OnSceneForward(InputAction.CallbackContext context);
        void OnSceneBackward(InputAction.CallbackContext context);
        void OnTargeting(InputAction.CallbackContext context);
        void OnChooseTarget(InputAction.CallbackContext context);
    }
}
